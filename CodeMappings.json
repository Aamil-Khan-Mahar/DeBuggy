{
    "Code1.py": "Description: This is a buggy Math class that contains methods to perform arithmetic operations.\n        Methods: add, subtract, multiply, divide, power",
    "Code2.py": "Description: This class, FlightTracker, is used to keep track of flights. It initializes with flights dictionary which contains the following keys: numbers, origins, destinations, durations, prices, dates, times, airlines, planes, seats, classes, assengers, status, captain.\n        Methods: get_flight_number, get_flight_origins, get_flight_destinations, get_flight_durations, get_flight_prices, get_flight_dates, get_flight_times, get_flight_airlines, get_flight_planes, get_flight_seats, get_flight_classes, get_flight_passengers, get_flight_status, get_flight_captain, get_total_flights, get_average_price, get_longest_flight_duration, get_shortest_flight_duration, get_total_passengers, get_flights_by_airline, get_flights_by_origin, get_flights_by_destination, get_flights_by_date, get_flights_by_status, get_flights_by_class, get_flights_by_captain, get_flights_by_plane, get_flights_by_time.",
    "Code3.py": "Description: This code defines a B+ Tree data structure for a Student Database.\n        \n        Methods: BPlusTreeNode, BPlusTree, Student, StudentDatabase, __init__, insert, insert_non_full, split_child, search, __init__, add_student, find_student",
    "Code4.py": "Description: This is a Convolutional Neural Network (CNN) model for image classification. The constructor initializes the model, the compile_model method compiles it, train_model trains it, and evaluate_model tests it. The model has 4 convolutional layers, 2 pooling layers, and 2 dense layers. The constructor takes in the input shape and number of classes as parameters.\n        \n        Methods:\n        __init__(self, input\\_shape, num\\_classes): \n        compile\\_model(self): \n        train\\_model(self, train\\_images, train\\_labels, epochs=5): \n        evaluate\\_model(self, test\\_images, test\\_labels):",
    "Code5.py": "Description: This code defines a Backend class that manages a database of user information. The class contains methods for adding, retrieving, updating, and deleting user information, as well as methods for authenticating users and changing their passwords.\n        Methods: __init__, get_user, create_user, update_user, delete_user, list_users, authenticate_user, change_password, search_users, get_user_profile, update_user_profile, deactivate_user, activate_user, get_active_users, get_inactive_users, non_existent_method",
    "Code6.py": "One line description: <One line description>\n\n        Description:\n        This class, RelativeGrader, is a grading system for students. It has a list of students and each student has a name and a grade.\n        Methods:\n        add_student: Adds a student to the list.\n        remove_student: Removes a student from the list.\n        get_student: Returns the information of the student.\n        update_grade: Updates the grade of the student.\n        average_grade: Returns the average grade of all the students in the list.\n        highest_grade: Returns the student with the highest grade.\n        lowest_grade: Returns the student with the lowest grade.\n        grade_distribution: Returns a dictionary containing the distribution of grades of all students.\n        median_grade: Returns the median grade of the students.\n        pass_fail: Returns the number of students who passed or failed based on a given passing grade.\n        top_n_students: Returns the top n students based on grades.\n        bottom_n_students: Returns the bottom n students based on grades.\n        grade_variance: Returns the grade variance of all the students in the list.\n        grade_standard_deviation: Returns the grade standard deviation of all the students in the list.\n        detect_collisions: Returns a list of students with duplicate names.\n        \n        One line description:\n        This class implements a grading system that manages students and their grades."
}