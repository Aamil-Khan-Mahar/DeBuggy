{
    "Code1.py": "Description: The code defines a class Math with 5 methods for basic arithmetic operations.\n        Methods: add, subtract, multiply, divide, power",
    "Code2.py": "Description: This is a FlightTracker class that has methods to retrieve various flight details from a given data.\n        Methods: get_flight_numbers, get_flight_origins, get_flight_destinations, get_flight_durations, get_flight_prices, get_flight_dates, get_flight_times, get_flight_airlines, get_flight_planes, get_flight_seats, get_flight_classes, get_flight_passengers, get_flight_status, get_flight_captain, get_total_flights, get_average_price, get_longest_flight_duration, get_shortest_flight_duration, get_total_passengers, get_flights_by_airline, get_flights_by_origin, get_flights_by_destination, get_flights_by_date, get_flights_by_status, get_flights_by_class, get_flights_by_captain, get_flights_by_plane, get_flights_by_time",
    "Code3.py": "Description: The code implements a buggy B+ tree data structure and a student database that uses it to store student records.\n        Methods: insert, insert_non_full, split_child, search, __init__, add_student, find_student",
    "Code4.py": "Description: This code defines a CNNModel class which includes a constructor that takes in two arguments input_shape and num_classes. It then initializes a sequential model and adds several layers to it, including several convolutional layers, pooling layers, flattening layer, and dense layers. It also includes three methods: compile\\_model, train\\_model, and evaluate\\_model.\n        Methods: compile\\_model, train\\_model, evaluate\\_model",
    "Code5.py": "Description: This is a backend class that manages user data in a given database.\n        Methods: __init__, get_user, create_user, update_user, delete_user, list_users, authenticate_user, change_password, search_users, get_user_profile, update_user_profile, deactivate_user, activate_user, get_active_users, get_inactive_users",
    "Code6.py": "Description: This code defines a class called RelativeGrader, which has methods to manage a list of students and their grades, and performs various statistical analyses on the grades.\n        Methods: add_student, remove_student, get_student, update_grade, average_grade, highest_grade, lowest_grade, grade_distribution, median_grade, pass_fail, top_n_students, bottom_n_students, grade_variance, grade_standard_deviation, detect_collisions."
}